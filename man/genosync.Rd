% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/genosync.R
\name{genosync}
\alias{genosync}
\title{\code{genosync}}
\usage{
genosync(seu_obj, hash_csv, max_soup_run)
}
\arguments{
\item{seu_obj}{The input Seurat object. Must contain hash assay named 'HTO' or 'hto' in dgCMatrix format.
Must contain Souporcell genotype assay(s) named GENO or geno with the desired k value (ex: 'GENO5').
Assumes Souporcell was run renaming all multiplet designations to 'multiplet' (see viewmastR
add_souporcell_seurat documentation for rename_assignments).}

\item{hash_csv}{The input hash-sample csv file path. The csv must contain Hash and Sample columns.}

\item{max_soup_run}{The highest Souporcell run, indicating the number of genotypes detected. Default is 8.}
}
\value{
If there are consensus matches, the kmeans and logistic results for those Souporcell runs will be returned.
If there are no matches, all kmeans and logistic results will be output for all Souporcell runs.
}
\description{
\code{genosync} To demultiplex pooled samples, this wrapper function runs two methods on hash data from
an input Seurat object. The first method combines kmeans and apriori association analysis, see documentation for kmeansync.
The second method runs binary logistic regression, see documentation for logisync. The outputs of both methods will be
compared for all Souporcell runs to see which runs have consensus when assigning genotypes to samples, and matching results
will be output. If there are no matches, all results will be output.
}
\examples{
\dontrun{

 output_list <- genosync(seu, csv='/path/to/hash_sampleABCD.csv')
  
}

}
